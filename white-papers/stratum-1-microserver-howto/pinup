#!/usr/bin/env python
#
# Query a microserver for its hardware configuration, including the
# pin designated to receive 1PPS by the pps-gpio driver.  With the
# -p option, set that pin.
#
# The evironment is assumed to be a Debian Linux variant.
#
import sys, os, re, getopt

try:
    my_input = raw_input
except NameError:
    my_input = input

# Map hardware revision numbers to Raspberry Pi versions
version_dict = {
    "0002" : "Model B Revision 1.0",
    "0003" : "Model B Revision 1.0",
    "0004" : "Model B Revision 2.0",
    "0005" : "Model B Revision 2.0",
    "0006" : "Model B Revision 2.0",
    "0007" : "Model A",
    "0008" : "Model A",
    "0009" : "Model A",
    "000d" : "Model B Revision 2.0",
    "000e" : "Model B Revision 2.0",
    "000f" : "Model B Revision 2.0",
    "0010" : "Model B+",
    "0011" : "Compute Module",
    "0012" : "Model A+",
    "a01041" : "Pi 2 Model B",
    "a21041" : "Pi 2 Model B",
    "900092" : "PiZero",
    "a02082" : "Pi 3 Model B",
    "a22082" : "Pi 3 Model B",
}

pin_pairs = (
    ("Adafruit HAT", 4),
    ("Uputronics HAT", 18),
    ("SKU 42425", 5),
    )

def pinprompt():
    print("Configuring GPIO pin....")
    #   GPIO04      |      P1-7     | Adafruit
    #   GPIO18      |      P1-12    | Uputronics
    #   GPIO05      |      PI-29    | SKU 424254
    pin_dict = {
        "Adafruit HAT" : 4,
        "Uputronics HAT" : 18,
        "SKU 42425" : 5,
        }
    while True:
        newpin = None
        for k in pin_dict:
            print("%s = %s" % (k[0], k))
        sel = my_input("Select a GPS daughterboard type: ").upper()
        for k in pin_dict:
            if k.startswith(sel):
                newpin = pin_dict[k]
        if newpin is not None:
            print("Configuring for PPS via GPIO pin %s" % newpin)
            break
    return newpin

if __name__ == "__main__":
    try:
        (options, arguments) = getopt.getopt(sys.argv[1:], "p")
    except getopt.GetoptError as e:
        print(e)
        sys.exit(1)
    pin = False

    for (switch, val) in options:
        if switch == '-p':
            pin = True
        elif switch == '-h':
            print(__doc__)
            raise SystemExit(0)

    if pin and os.geteuid() != 0:
        print("The config function must run as root.")
        raise SystemExit(0)

    hostname = open("/etc/hostname").read().strip()
    sys.stdout.write(hostname + ": ")

    # Identify the SBC
    if os.path.exists("/dev/ttyAMA0"):
        sbc_type = "RPi"
        default_login = "pi"
        gpsdev = "/dev/ttyAMA0"
        sys.stdout.write("Raspberry ")
    elif "ODROID-C2" in open("/proc/cpuinfo").read():
        sbc_type = "Odroid C2"
        default_login = "odroid"
        gpsdev = "/dev/ttyS1"
        sys.stdout.write("ODroid C2 ")
    else:
        print("Unknown SBC type.")
        raise SystemExit(1)

    # Determine the version
    revno = None
    for line in open("/proc/cpuinfo"):
        if line.startswith("Revision"):
            revno = line.split()[2]
    if sbc_type == "RPi":
        if revno is None or revno not in version_dict:
            sys.stdout.write("can't identify SBC version.\n")
            raise SystemExit(0)
        else:
            revno = version_dict[revno]
    sys.stdout.write("%s, " % (revno))

    reboot_required = False

    if sbc_type == "RPi":
        bc = "/boot/config.txt"
        dtoverlay = "dtoverlay=pps-gpio,gpiopin="
        gpio_re = re.compile(dtoverlay + "([0-9]*)")
        config_txt = open(bc).read()
        m = gpio_re.search(config_txt)
        if m:
            ptype = dict([(str(y), x) for (x, y) in pin_pairs])[m.group(1)]
            sys.stdout.write("configured for the %s.\n" % ptype)
        else:
            print("GPIO not configured")
            raise SystemExit(1)

        if pin:
            newpin = pin_prompt()

            new_config = re.sub(gpio_re, dtoverlay + str(newpin), config_txt)
            if new_config == config_txt:
                print("internal error - no substitution")
                raise SystemExit(1)
            with open(bc, "w") as wp:
                wp.write(new_config)
            reboot_required = True
    elif sbc_type == "Odroid C2":
        print("Not working on Odroid C2 yet")
        raise SystemExit(1)

    if reboot_required:
        print("")
        print("A reboot is required for the GPIO change to take effect.")
    elif pin:
        print("No configuration changes - no reboot is required.")

#end

