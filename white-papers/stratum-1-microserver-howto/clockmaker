#!/usr/bin/env python
#
# Configure an SBC as a single-purpose timeserver.
#
# To run this, you must have created a non-root, non-default account
# on the SBC. Copy it to the account's $HOME, go root there, and
# run it.
#
# If there is a local config utility such as raspi-config on the
# Raspberry Pi, you should already have run it before this.
#
# The evironment is assumed to be Debian Linux variant.
#
import sys, os, re

try:
    my_input = raw_input
except NameError:
    my_input = input

# If this changes, the corresponding Makefile declaration and asciidoc macro
# must as well.
webfaq = "http://www.catb.org/esr/faqs/stratum-1-microserver-howto/"

# Map hardware revision numbers to Raspeberry Pi versions
version_dict = {
    "0002" : "Model B Revision 1.0",
    "0003" : "Model B Revision 1.0",
    "0004" : "Model B Revision 2.0",
    "0005" : "Model B Revision 2.0",
    "0006" : "Model B Revision 2.0",
    "0007" : "Model A",
    "0008" : "Model A",
    "0009" : "Model A",
    "000d" : "Model B Revision 2.0",
    "000e" : "Model B Revision 2.0",
    "000f" : "Model B Revision 2.0",
    "0010" : "Model B+",
    "0011" : "Compute Module",
    "0012" : "Model A+",
    "a01041" : "Pi 2 Model B",
    "a21041" : "Pi 2 Model B",
    "900092" : "PiZero",
    "a02082" : "Pi 3 Model B",
    "a22082" : "Pi 3 Model B",
}

def config():
    "Perform root-mode preconfiguration of the SBC"
    if os.path.exists("/dev/ttyAMA0"):
        sbc_type = "RPi"
        default_login = "pi"
        gpsdev = "/dev/ttyAMA0"
        print("This is a Raspberry Pi")
    else:
        print("Unknown SBC type.")
        raise SystemExit(1)

    if os.geteuid() != 0:
        print("The --config function must run as root.")
        raise SystemExit(0)

    # Determine the Pi version
    revno = None
    for line in open("/proc/cpuinfo"):
        if line.startswith("Revision"):
            revno = line.split()[2]
    if revno is None or revno not in version_dict:
        print("Can't identify SBC version")
        raise SystemExit(0)
    else:
        print("I see hardware revision %s, %s" % (revno, version_dict[revno]))

    print("")

    reboot_required = False

    print("About to upgrade your OS")
    os.system("apt-get -y update; apt-get -y dist-upgrade")

    print("")

    if sbc_type == "RPi":
        bc = "/boot/config.txt"
        # Has no effect on a Pi 2.  Do it everywhere, in case we swap
        # an SD from a 3 to a 2 and have to wonder why it fails.
        rp3_overlay = """
# Disable Bluetooth so serial-tty speed is no longer tied to CPU speed
dtoverlay=pi3-miniuart-bt-overlay
"""
        if "dtoverlay=pi3-miniuart-bt-overlay" in open(bc).read():
            print("Bluetooth use of UART already disabled.")
        else:
            print("Reclaiming serial UART.")
            with open(bc, "a") as ap:
                ap.write(rp3_overlay)
            reboot_required = True

        print("")
        gpio_re = re.compile("dtoverlay=pps-gpio,gpiopin=([0-9]*)")
        m = gpio_re.search(open(bc).read())
        if m:
            print("GPIO pin already configured to %s." % m.group(1))
        else:
            print("Configuring GPIO pin....")
            #   GPIO04      |      P1-7     | Adafruit
            #   GPIO18      |      P1-12    | Uputronics
            #   GPIO05      |      PI-29    | SKU 424254
            pin_dict = {
                "Adafruit HAT" : 4,
                "Uputronics HAT" : 18,
                "SKU 42425" : 5,
                }
            while True:
                pin = None
                for k in pin_dict:
                    print("%s = %s" % (k[0], k))
                sel = my_input("Select a GPS daughterboard type: ").upper()
                for k in pin_dict:
                    if k.startswith(sel):
                        pin = pin_dict[k]
                if pin is not None:
                    print("Configuring for PPS via GPIO pin %s" % pin)
                    break
            gpio = """
# Get 1PPS from HAT pin 
dtoverlay=pps-gpio,gpiopin=%s
"""
            with open(bc, "a") as ap:
                ap.write(gpio % pin)
            reboot_required = True
        if not os.path.exists("/etc/udev/rules.d/10-gps.rules"):
            print("")
            print("Creating /dev/gpsd0 symlink rule")
            with open("/etc/udev/rules.d/10-gps.rules", "w") as wfp:
                wfp.write('KERNEL=="ttyAMA0", SYMLINK+="gpsd0"')
                reboot_required = True

        print("")

        print("Getting build and test prerequisites")
        prerequisites = "apt-get -y install pps-tools git scons ncurses-dev "\
                        "python-dev bc bison libevent-dev libreadline-dev "\
                        "libcap-dev libssl-dev"
        os.system(prerequisites)

        print("")
        if reboot_required:
            print("A reboot is required for configuration changes to take effect")
            os.system("reboot")
        else:
            print("No configuration changes - no reboot is required.")

def build():
    "Perform fetch and build of the software."
    if os.geteuid() == 0:
        print("The --build function should not be run as root.")
        raise SystemExit(0)

    if not os.path.isdir("gpsd"):
        os.system("git clone git://git.savannah.nongnu.org/gpsd.git")
    else:
        os.system("(chdir gpsd; git pull)")
    os.chdir("gpsd")
    os.system("scons timeservice=yes mtk3301=yes fixed_port_speed=9600 fixed_stop_bits=1")
    os.chdir("..")

    if not os.path.isdir("ntpsec"):
        os.system("git clone https://gitlab.com/NTPsec/ntpsec.git")
    else:
        os.system("(chdir ntpsec; git pull)")
    os.chdir("ntpsec")
    os.system("./waf configure --refclock=28")
    os.system("./waf build")
    os.chdir("..")

    os.system("rm -f ntp.conf; wget %s/ntp.conf" % webfaq)

def install():
    "Install timeserver software & start script once everything has been tested."
    if os.geteuid() != 0:
        print("The --install function must run as root.")
        raise SystemExit(0)

    print("Removing stock NTP")
    os.system("apt-get -y remove --purge ntp")

    print("Installing GPSD")
    os.system("(cd gpsd && scons install)")

    print("Installing NTPsec")
    os.system("(cd ntpsec && ./waf install) && cp ntp.conf /etc")

    if "Time service customization" in open("/etc/rc.local").read():
        print("Time service setup already installed.")
    else:
        print("Installing startup in /etc/rc.local")
        startup = """
# Time service customization
stty -F /dev/gpsd0 raw 9600 cs8 clocal -cstopb
gpsd /dev/gpsd0
sleep 2
ntpd -g

"""
        shexit = None
        with open("/etc/rc.local-new", "w") as wp:
            for line in open("/etc/rc.local"):
                if line.startswith("exit 0"):
                    shexit = line
                else:
                    wp.write(line)
            wp.write(startup)
            if shexit:
                wp.write(shexit)
        os.rename("/etc/rc.local-new", "/etc/rc.local")

def secure():
    "Secure system after a non-default user account has been ssh-enabled."
    if not os.path/isdir(".ssh"):
        print("No ssh keys have been installed, bailing out.")
        raise SystemExit(1)

    if os.geteuid() != 0:
        print("The --secure function must run as root.")
        raise SystemExit(0)

    rp = open("/etc/ssh/sshd_config", "r")
    wp = open("/etc/ssh/sshd_config-new", "w")
    modified = False
    for line in rp:
        if line.startswith("PermitRootLogin") and "no" not in line:
            modified = True
            line = "PermitRootLogin no\n"
        elif line.startswith("#PermitRootLogin"):
            modified = True
            line = "PermitRootLogin no\n"
        elif line.startswith("PasswordAuthentication") and "no" not in line:
            modified = True
            line = "PasswordAuthentication no\n"
        elif line.startswith("#PasswordAuthentication"):
            modified = True
            line = "PasswordAuthentication no\n"
        wp.write(line)
    if modified:
        print("Disabling root login and password tunneling.")
        os.rename("/etc/ssh/sshd_config-new", "/etc/ssh/sshd_config")
        reboot_required = True
    else:
        print("Root login and password tunneling are already disabled.")

    print("")
    if ("\n"+ default_login + ":") in open("/etc/passwd").read():
        print("Default login is still present.")
        os.system("deluser %s" % default_login)
        reboot_required = True
    else:
        print("Default login has been removed.")

if __name__ == "__main__":
    if len(sys.argv) < 2 or sys.argv[1] not in ("--config","--build","--install"):
        print("Please specify a configueration stage argument:")
        print("  --config = basic SBC configuration")
        print("  --build = build timeserver software")
        print("  --install = install timeserver software")
        raise SystemExit(1)

    if sys.argv[1] == "--config":
        config()
    if sys.argv[1] == "--build":
        build()
    if sys.argv[1] == "--install":
        install()
    if sys.argv[1] == "--secure":
        install()

